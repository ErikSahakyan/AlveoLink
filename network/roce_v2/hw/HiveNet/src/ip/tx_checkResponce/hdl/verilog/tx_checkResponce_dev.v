// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="tx_checkResponce_dev_tx_checkResponce_dev,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu55c-fsvh2892-2L-e,HLS_INPUT_CLOCK=2.500000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=1.670937,HLS_SYN_LAT=4,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1138,HLS_SYN_LUT=713,HLS_VERSION=2020_2}" *)

module tx_checkResponce_dev (
        ap_clk,
        ap_rst_n,
        header_s_V_TDATA,
        header_s_V_TVALID,
        header_s_V_TREADY,
        resp_qp_o_V_TDATA,
        resp_qp_o_V_TVALID,
        resp_qp_o_V_TREADY,
        resp_psn_o_V_TDATA,
        resp_psn_o_V_TVALID,
        resp_psn_o_V_TREADY,
        resp_syndrome_o_V_TDATA,
        resp_syndrome_o_V_TVALID,
        resp_syndrome_o_V_TREADY,
        resp_msn_V_TDATA,
        resp_msn_V_TVALID,
        resp_msn_V_TREADY,
        statBitMap_address_i_V_TDATA,
        statBitMap_address_i_V_TVALID,
        statBitMap_address_i_V_TREADY,
        statBitMap_data_i_V_TDATA,
        statBitMap_data_i_V_TVALID,
        statBitMap_data_i_V_TREADY,
        size_o_V_TDATA,
        size_o_V_TVALID,
        size_o_V_TREADY,
        readPSN_l_V_TDATA,
        readPSN_l_V_TVALID,
        readPSN_l_V_TREADY,
        writePSN_l_V_TDATA,
        writePSN_l_V_TVALID,
        writePSN_l_V_TREADY
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst_n;
input  [255:0] header_s_V_TDATA;
input   header_s_V_TVALID;
output   header_s_V_TREADY;
output  [23:0] resp_qp_o_V_TDATA;
output   resp_qp_o_V_TVALID;
input   resp_qp_o_V_TREADY;
output  [23:0] resp_psn_o_V_TDATA;
output   resp_psn_o_V_TVALID;
input   resp_psn_o_V_TREADY;
output  [7:0] resp_syndrome_o_V_TDATA;
output   resp_syndrome_o_V_TVALID;
input   resp_syndrome_o_V_TREADY;
output  [23:0] resp_msn_V_TDATA;
output   resp_msn_V_TVALID;
input   resp_msn_V_TREADY;
output  [23:0] statBitMap_address_i_V_TDATA;
output   statBitMap_address_i_V_TVALID;
input   statBitMap_address_i_V_TREADY;
output  [7:0] statBitMap_data_i_V_TDATA;
output   statBitMap_data_i_V_TVALID;
input   statBitMap_data_i_V_TREADY;
output  [31:0] size_o_V_TDATA;
output   size_o_V_TVALID;
input   size_o_V_TREADY;
input  [23:0] readPSN_l_V_TDATA;
input   readPSN_l_V_TVALID;
output   readPSN_l_V_TREADY;
input  [23:0] writePSN_l_V_TDATA;
input   writePSN_l_V_TVALID;
output   writePSN_l_V_TREADY;

(* shreg_extract = "no" *) reg    ap_rst_reg_2;
(* shreg_extract = "no" *) reg    ap_rst_reg_1;
(* shreg_extract = "no" *) reg    ap_rst_n_inv;
reg    resp_qp_o_V_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter3;
wire    ap_block_pp0_stage0;
reg   [0:0] p_vld_reg_550;
reg   [0:0] p_vld_reg_550_pp0_iter2_reg;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] p_vld_reg_550_pp0_iter3_reg;
reg    resp_psn_o_V_TDATA_blk_n;
reg    resp_syndrome_o_V_TDATA_blk_n;
reg    resp_msn_V_TDATA_blk_n;
reg    statBitMap_address_i_V_TDATA_blk_n;
reg   [0:0] phi_ln874_reg_620;
reg   [0:0] phi_ln874_reg_620_pp0_iter3_reg;
reg    statBitMap_data_i_V_TDATA_blk_n;
reg    size_o_V_TDATA_blk_n;
reg    readPSN_l_V_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    writePSN_l_V_TDATA_blk_n;
reg   [23:0] tmp_reg_515;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_predicate_op80_write_state4;
reg    ap_predicate_op82_write_state4;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_state4_io;
reg    ap_predicate_op111_write_state5;
reg    ap_predicate_op112_write_state5;
wire    regslice_both_resp_qp_o_V_U_apdone_blk;
wire    regslice_both_resp_psn_o_V_U_apdone_blk;
wire    regslice_both_resp_syndrome_o_V_U_apdone_blk;
wire    regslice_both_resp_msn_V_U_apdone_blk;
wire    regslice_both_statBitMap_address_i_V_U_apdone_blk;
wire    regslice_both_statBitMap_data_i_V_U_apdone_blk;
wire    regslice_both_size_o_V_U_apdone_blk;
reg    ap_block_state5_pp0_stage0_iter4;
reg    ap_block_state5_io;
reg    ap_block_pp0_stage0_11001;
reg   [23:0] tmp_2_reg_523;
wire   [0:0] icmp_ln878_fu_165_p2;
reg   [0:0] icmp_ln878_reg_530;
wire   [0:0] icmp_ln878_1_fu_171_p2;
reg   [0:0] icmp_ln878_1_reg_535;
wire   [21:0] sub_ln44_fu_205_p2;
reg   [21:0] sub_ln44_reg_540;
wire   [21:0] select_ln878_1_fu_265_p3;
reg   [21:0] select_ln878_1_reg_545;
reg   [0:0] p_vld_reg_550_pp0_iter1_reg;
reg   [255:0] p_s_reg_554;
reg   [255:0] p_s_reg_554_pp0_iter1_reg;
reg   [23:0] resp_bth_psn_V_reg_560;
reg   [23:0] resp_bth_psn_V_reg_560_pp0_iter1_reg;
reg   [23:0] resp_bth_psn_V_reg_560_pp0_iter2_reg;
reg   [23:0] p_2_reg_569;
reg   [23:0] p_2_reg_569_pp0_iter1_reg;
reg   [23:0] p_2_reg_569_pp0_iter2_reg;
reg   [7:0] resp_ack_syndrome_V_reg_574;
reg   [7:0] resp_ack_syndrome_V_reg_574_pp0_iter1_reg;
reg   [7:0] resp_ack_syndrome_V_reg_574_pp0_iter2_reg;
reg   [23:0] p_4_reg_579;
reg   [23:0] p_4_reg_579_pp0_iter1_reg;
reg   [23:0] p_4_reg_579_pp0_iter2_reg;
wire  signed [21:0] size_l_fu_331_p3;
reg  signed [21:0] size_l_reg_584;
reg  signed [21:0] size_l_reg_584_pp0_iter2_reg;
wire   [0:0] icmp_ln870_fu_353_p2;
reg   [0:0] icmp_ln870_reg_589;
wire   [0:0] icmp_ln870_1_fu_357_p2;
reg   [0:0] icmp_ln870_1_reg_595;
wire   [0:0] icmp_ln882_fu_361_p2;
reg   [0:0] icmp_ln882_reg_600;
wire   [25:0] add_ln146_1_fu_375_p2;
reg   [25:0] add_ln146_1_reg_605;
wire   [25:0] sub_ln146_fu_381_p2;
reg   [25:0] sub_ln146_reg_610;
wire   [0:0] icmp_ln890_1_fu_393_p2;
reg   [0:0] icmp_ln890_1_reg_615;
wire   [0:0] phi_ln874_fu_474_p2;
reg   [19:0] p_Result_1_reg_624;
wire   [0:0] icmp_ln174_fu_497_p2;
reg   [0:0] icmp_ln174_reg_629;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
wire   [0:0] header_s_V_read_nbread_fu_102_p2_0;
reg    ap_block_pp0_stage0_01001;
wire   [19:0] write_r_fu_161_p1;
wire   [19:0] read_r_fu_157_p1;
wire   [20:0] or_ln_fu_185_p3;
wire   [21:0] zext_ln1347_2_fu_193_p1;
wire   [21:0] zext_ln44_1_fu_201_p1;
wire   [20:0] or_ln1_fu_211_p3;
wire   [21:0] zext_ln46_fu_219_p1;
wire   [21:0] zext_ln1347_fu_177_p1;
wire   [20:0] zext_ln1347_1_fu_181_p1;
wire   [20:0] zext_ln44_fu_197_p1;
wire   [20:0] ret_fu_229_p2;
wire   [0:0] and_ln878_fu_239_p2;
wire  signed [21:0] sext_ln878_fu_235_p1;
wire   [0:0] xor_ln878_fu_253_p2;
wire   [0:0] and_ln878_1_fu_259_p2;
wire   [21:0] sub_ln46_fu_223_p2;
wire   [21:0] select_ln878_fu_245_p3;
wire   [0:0] xor_ln878_1_fu_321_p2;
wire   [0:0] and_ln878_2_fu_326_p2;
wire   [24:0] zext_ln139_fu_344_p1;
wire   [24:0] add_ln146_fu_365_p2;
wire  signed [25:0] sext_ln146_fu_371_p1;
wire  signed [25:0] sext_ln0_1_fu_337_p1;
wire   [25:0] zext_ln140_1_fu_350_p1;
wire   [24:0] zext_ln140_fu_347_p1;
wire   [24:0] add_ln146_2_fu_387_p2;
wire   [24:0] zext_ln18_fu_341_p1;
wire   [25:0] zext_ln18_1_fu_399_p1;
wire   [0:0] icmp_ln882_1_fu_407_p2;
wire   [0:0] icmp_ln890_fu_402_p2;
wire   [0:0] or_ln890_fu_427_p2;
wire   [0:0] or_ln870_fu_423_p2;
wire   [0:0] or_ln890_1_fu_432_p2;
wire   [0:0] xor_ln882_fu_412_p2;
wire   [0:0] xor_ln890_1_fu_418_p2;
wire   [0:0] xor_ln870_fu_444_p2;
wire   [0:0] tmp36_fu_456_p2;
wire   [0:0] tmp35_fu_450_p2;
wire   [0:0] sel_tmp31_fu_462_p2;
wire   [0:0] xor_ln890_fu_438_p2;
wire   [0:0] tmp37_fu_468_p2;
wire   [2:0] p_Result_s_fu_479_p4;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_header_s_V_U_apdone_blk;
wire   [255:0] header_s_V_TDATA_int_regslice;
wire    header_s_V_TVALID_int_regslice;
reg    header_s_V_TREADY_int_regslice;
wire    regslice_both_header_s_V_U_ack_in;
reg    resp_qp_o_V_TVALID_int_regslice;
wire    resp_qp_o_V_TREADY_int_regslice;
wire    regslice_both_resp_qp_o_V_U_vld_out;
reg    resp_psn_o_V_TVALID_int_regslice;
wire    resp_psn_o_V_TREADY_int_regslice;
wire    regslice_both_resp_psn_o_V_U_vld_out;
reg    resp_syndrome_o_V_TVALID_int_regslice;
wire    resp_syndrome_o_V_TREADY_int_regslice;
wire    regslice_both_resp_syndrome_o_V_U_vld_out;
reg    resp_msn_V_TVALID_int_regslice;
wire    resp_msn_V_TREADY_int_regslice;
wire    regslice_both_resp_msn_V_U_vld_out;
wire   [23:0] statBitMap_address_i_V_TDATA_int_regslice;
reg    statBitMap_address_i_V_TVALID_int_regslice;
wire    statBitMap_address_i_V_TREADY_int_regslice;
wire    regslice_both_statBitMap_address_i_V_U_vld_out;
wire   [7:0] statBitMap_data_i_V_TDATA_int_regslice;
reg    statBitMap_data_i_V_TVALID_int_regslice;
wire    statBitMap_data_i_V_TREADY_int_regslice;
wire    regslice_both_statBitMap_data_i_V_U_vld_out;
wire   [31:0] size_o_V_TDATA_int_regslice;
reg    size_o_V_TVALID_int_regslice;
wire    size_o_V_TREADY_int_regslice;
wire    regslice_both_size_o_V_U_vld_out;
wire    regslice_both_readPSN_l_V_U_apdone_blk;
wire   [23:0] readPSN_l_V_TDATA_int_regslice;
wire    readPSN_l_V_TVALID_int_regslice;
reg    readPSN_l_V_TREADY_int_regslice;
wire    regslice_both_readPSN_l_V_U_ack_in;
wire    regslice_both_writePSN_l_V_U_apdone_blk;
wire   [23:0] writePSN_l_V_TDATA_int_regslice;
wire    writePSN_l_V_TVALID_int_regslice;
reg    writePSN_l_V_TREADY_int_regslice;
wire    regslice_both_writePSN_l_V_U_ack_in;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_rst_reg_2 = 1'b0;
#0 ap_rst_reg_1 = 1'b0;
#0 ap_rst_n_inv = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 p_vld_reg_550 = 1'd0;
#0 p_vld_reg_550_pp0_iter2_reg = 1'd0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 p_vld_reg_550_pp0_iter3_reg = 1'd0;
#0 phi_ln874_reg_620 = 1'd0;
#0 phi_ln874_reg_620_pp0_iter3_reg = 1'd0;
#0 ap_CS_fsm = 1'd1;
#0 tmp_reg_515 = 24'd0;
#0 tmp_2_reg_523 = 24'd0;
#0 icmp_ln878_reg_530 = 1'd0;
#0 icmp_ln878_1_reg_535 = 1'd0;
#0 sub_ln44_reg_540 = 22'd0;
#0 select_ln878_1_reg_545 = 22'd0;
#0 p_vld_reg_550_pp0_iter1_reg = 1'd0;
#0 p_s_reg_554 = 256'd0;
#0 p_s_reg_554_pp0_iter1_reg = 256'd0;
#0 resp_bth_psn_V_reg_560 = 24'd0;
#0 resp_bth_psn_V_reg_560_pp0_iter1_reg = 24'd0;
#0 resp_bth_psn_V_reg_560_pp0_iter2_reg = 24'd0;
#0 p_2_reg_569 = 24'd0;
#0 p_2_reg_569_pp0_iter1_reg = 24'd0;
#0 p_2_reg_569_pp0_iter2_reg = 24'd0;
#0 resp_ack_syndrome_V_reg_574 = 8'd0;
#0 resp_ack_syndrome_V_reg_574_pp0_iter1_reg = 8'd0;
#0 resp_ack_syndrome_V_reg_574_pp0_iter2_reg = 8'd0;
#0 p_4_reg_579 = 24'd0;
#0 p_4_reg_579_pp0_iter1_reg = 24'd0;
#0 p_4_reg_579_pp0_iter2_reg = 24'd0;
#0 size_l_reg_584 = 22'd0;
#0 size_l_reg_584_pp0_iter2_reg = 22'd0;
#0 icmp_ln870_reg_589 = 1'd0;
#0 icmp_ln870_1_reg_595 = 1'd0;
#0 icmp_ln882_reg_600 = 1'd0;
#0 add_ln146_1_reg_605 = 26'd0;
#0 sub_ln146_reg_610 = 26'd0;
#0 icmp_ln890_1_reg_615 = 1'd0;
#0 p_Result_1_reg_624 = 20'd0;
#0 icmp_ln174_reg_629 = 1'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

tx_checkResponce_dev_regslice_both #(
    .DataWidth( 256 ))
regslice_both_header_s_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(header_s_V_TDATA),
    .vld_in(header_s_V_TVALID),
    .ack_in(regslice_both_header_s_V_U_ack_in),
    .data_out(header_s_V_TDATA_int_regslice),
    .vld_out(header_s_V_TVALID_int_regslice),
    .ack_out(header_s_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_header_s_V_U_apdone_blk)
);

tx_checkResponce_dev_regslice_both #(
    .DataWidth( 24 ))
regslice_both_resp_qp_o_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(p_2_reg_569_pp0_iter2_reg),
    .vld_in(resp_qp_o_V_TVALID_int_regslice),
    .ack_in(resp_qp_o_V_TREADY_int_regslice),
    .data_out(resp_qp_o_V_TDATA),
    .vld_out(regslice_both_resp_qp_o_V_U_vld_out),
    .ack_out(resp_qp_o_V_TREADY),
    .apdone_blk(regslice_both_resp_qp_o_V_U_apdone_blk)
);

tx_checkResponce_dev_regslice_both #(
    .DataWidth( 24 ))
regslice_both_resp_psn_o_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(resp_bth_psn_V_reg_560_pp0_iter2_reg),
    .vld_in(resp_psn_o_V_TVALID_int_regslice),
    .ack_in(resp_psn_o_V_TREADY_int_regslice),
    .data_out(resp_psn_o_V_TDATA),
    .vld_out(regslice_both_resp_psn_o_V_U_vld_out),
    .ack_out(resp_psn_o_V_TREADY),
    .apdone_blk(regslice_both_resp_psn_o_V_U_apdone_blk)
);

tx_checkResponce_dev_regslice_both #(
    .DataWidth( 8 ))
regslice_both_resp_syndrome_o_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(resp_ack_syndrome_V_reg_574_pp0_iter2_reg),
    .vld_in(resp_syndrome_o_V_TVALID_int_regslice),
    .ack_in(resp_syndrome_o_V_TREADY_int_regslice),
    .data_out(resp_syndrome_o_V_TDATA),
    .vld_out(regslice_both_resp_syndrome_o_V_U_vld_out),
    .ack_out(resp_syndrome_o_V_TREADY),
    .apdone_blk(regslice_both_resp_syndrome_o_V_U_apdone_blk)
);

tx_checkResponce_dev_regslice_both #(
    .DataWidth( 24 ))
regslice_both_resp_msn_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(p_4_reg_579_pp0_iter2_reg),
    .vld_in(resp_msn_V_TVALID_int_regslice),
    .ack_in(resp_msn_V_TREADY_int_regslice),
    .data_out(resp_msn_V_TDATA),
    .vld_out(regslice_both_resp_msn_V_U_vld_out),
    .ack_out(resp_msn_V_TREADY),
    .apdone_blk(regslice_both_resp_msn_V_U_apdone_blk)
);

tx_checkResponce_dev_regslice_both #(
    .DataWidth( 24 ))
regslice_both_statBitMap_address_i_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(statBitMap_address_i_V_TDATA_int_regslice),
    .vld_in(statBitMap_address_i_V_TVALID_int_regslice),
    .ack_in(statBitMap_address_i_V_TREADY_int_regslice),
    .data_out(statBitMap_address_i_V_TDATA),
    .vld_out(regslice_both_statBitMap_address_i_V_U_vld_out),
    .ack_out(statBitMap_address_i_V_TREADY),
    .apdone_blk(regslice_both_statBitMap_address_i_V_U_apdone_blk)
);

tx_checkResponce_dev_regslice_both #(
    .DataWidth( 8 ))
regslice_both_statBitMap_data_i_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(statBitMap_data_i_V_TDATA_int_regslice),
    .vld_in(statBitMap_data_i_V_TVALID_int_regslice),
    .ack_in(statBitMap_data_i_V_TREADY_int_regslice),
    .data_out(statBitMap_data_i_V_TDATA),
    .vld_out(regslice_both_statBitMap_data_i_V_U_vld_out),
    .ack_out(statBitMap_data_i_V_TREADY),
    .apdone_blk(regslice_both_statBitMap_data_i_V_U_apdone_blk)
);

tx_checkResponce_dev_regslice_both #(
    .DataWidth( 32 ))
regslice_both_size_o_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(size_o_V_TDATA_int_regslice),
    .vld_in(size_o_V_TVALID_int_regslice),
    .ack_in(size_o_V_TREADY_int_regslice),
    .data_out(size_o_V_TDATA),
    .vld_out(regslice_both_size_o_V_U_vld_out),
    .ack_out(size_o_V_TREADY),
    .apdone_blk(regslice_both_size_o_V_U_apdone_blk)
);

tx_checkResponce_dev_regslice_both #(
    .DataWidth( 24 ))
regslice_both_readPSN_l_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(readPSN_l_V_TDATA),
    .vld_in(readPSN_l_V_TVALID),
    .ack_in(regslice_both_readPSN_l_V_U_ack_in),
    .data_out(readPSN_l_V_TDATA_int_regslice),
    .vld_out(readPSN_l_V_TVALID_int_regslice),
    .ack_out(readPSN_l_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_readPSN_l_V_U_apdone_blk)
);

tx_checkResponce_dev_regslice_both #(
    .DataWidth( 24 ))
regslice_both_writePSN_l_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(writePSN_l_V_TDATA),
    .vld_in(writePSN_l_V_TVALID),
    .ack_in(regslice_both_writePSN_l_V_U_ack_in),
    .data_out(writePSN_l_V_TDATA_int_regslice),
    .vld_out(writePSN_l_V_TVALID_int_regslice),
    .ack_out(writePSN_l_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_writePSN_l_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        add_ln146_1_reg_605 <= 26'd0;
    end else begin
        if (((p_vld_reg_550 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add_ln146_1_reg_605 <= add_ln146_1_fu_375_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_rst_n_inv <= 1'b0;
    end else begin
        ap_rst_n_inv <= ap_rst_reg_1;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_rst_reg_1 <= 1'b0;
    end else begin
        ap_rst_reg_1 <= ap_rst_reg_2;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_rst_reg_2 <= 1'b0;
    end else begin
        ap_rst_reg_2 <= ~ap_rst_n;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln174_reg_629 <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (phi_ln874_fu_474_p2 == 1'd1) & (p_vld_reg_550_pp0_iter1_reg == 1'd1))) begin
            icmp_ln174_reg_629 <= icmp_ln174_fu_497_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln870_1_reg_595 <= 1'd0;
    end else begin
        if (((p_vld_reg_550 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            icmp_ln870_1_reg_595 <= icmp_ln870_1_fu_357_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln870_reg_589 <= 1'd0;
    end else begin
        if (((p_vld_reg_550 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            icmp_ln870_reg_589 <= icmp_ln870_fu_353_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln878_1_reg_535 <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            icmp_ln878_1_reg_535 <= icmp_ln878_1_fu_171_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln878_reg_530 <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            icmp_ln878_reg_530 <= icmp_ln878_fu_165_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln882_reg_600 <= 1'd0;
    end else begin
        if (((p_vld_reg_550 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            icmp_ln882_reg_600 <= icmp_ln882_fu_361_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln890_1_reg_615 <= 1'd0;
    end else begin
        if (((p_vld_reg_550 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            icmp_ln890_1_reg_615 <= icmp_ln890_1_fu_393_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_2_reg_569 <= 24'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            p_2_reg_569 <= {{header_s_V_TDATA_int_regslice[119:96]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_2_reg_569_pp0_iter1_reg <= 24'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            p_2_reg_569_pp0_iter1_reg <= p_2_reg_569;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_2_reg_569_pp0_iter2_reg <= 24'd0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_11001)) begin
            p_2_reg_569_pp0_iter2_reg <= p_2_reg_569_pp0_iter1_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_4_reg_579 <= 24'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            p_4_reg_579 <= {{header_s_V_TDATA_int_regslice[215:192]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_4_reg_579_pp0_iter1_reg <= 24'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            p_4_reg_579_pp0_iter1_reg <= p_4_reg_579;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_4_reg_579_pp0_iter2_reg <= 24'd0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_11001)) begin
            p_4_reg_579_pp0_iter2_reg <= p_4_reg_579_pp0_iter1_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_Result_1_reg_624 <= 20'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (phi_ln874_fu_474_p2 == 1'd1) & (p_vld_reg_550_pp0_iter1_reg == 1'd1))) begin
            p_Result_1_reg_624 <= {{p_s_reg_554_pp0_iter1_reg[83:64]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_s_reg_554 <= 256'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            p_s_reg_554 <= header_s_V_TDATA_int_regslice;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_s_reg_554_pp0_iter1_reg <= 256'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            p_s_reg_554_pp0_iter1_reg <= p_s_reg_554;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_vld_reg_550 <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            p_vld_reg_550 <= header_s_V_read_nbread_fu_102_p2_0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_vld_reg_550_pp0_iter1_reg <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            p_vld_reg_550_pp0_iter1_reg <= p_vld_reg_550;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_vld_reg_550_pp0_iter2_reg <= 1'd0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_11001)) begin
            p_vld_reg_550_pp0_iter2_reg <= p_vld_reg_550_pp0_iter1_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_vld_reg_550_pp0_iter3_reg <= 1'd0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_11001)) begin
            p_vld_reg_550_pp0_iter3_reg <= p_vld_reg_550_pp0_iter2_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        phi_ln874_reg_620 <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (p_vld_reg_550_pp0_iter1_reg == 1'd1))) begin
            phi_ln874_reg_620 <= phi_ln874_fu_474_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        phi_ln874_reg_620_pp0_iter3_reg <= 1'd0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_11001)) begin
            phi_ln874_reg_620_pp0_iter3_reg <= phi_ln874_reg_620;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        resp_ack_syndrome_V_reg_574 <= 8'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            resp_ack_syndrome_V_reg_574 <= {{header_s_V_TDATA_int_regslice[167:160]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        resp_ack_syndrome_V_reg_574_pp0_iter1_reg <= 8'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            resp_ack_syndrome_V_reg_574_pp0_iter1_reg <= resp_ack_syndrome_V_reg_574;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        resp_ack_syndrome_V_reg_574_pp0_iter2_reg <= 8'd0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_11001)) begin
            resp_ack_syndrome_V_reg_574_pp0_iter2_reg <= resp_ack_syndrome_V_reg_574_pp0_iter1_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        resp_bth_psn_V_reg_560 <= 24'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            resp_bth_psn_V_reg_560 <= {{header_s_V_TDATA_int_regslice[87:64]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        resp_bth_psn_V_reg_560_pp0_iter1_reg <= 24'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            resp_bth_psn_V_reg_560_pp0_iter1_reg <= resp_bth_psn_V_reg_560;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        resp_bth_psn_V_reg_560_pp0_iter2_reg <= 24'd0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_11001)) begin
            resp_bth_psn_V_reg_560_pp0_iter2_reg <= resp_bth_psn_V_reg_560_pp0_iter1_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        select_ln878_1_reg_545 <= 22'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            select_ln878_1_reg_545 <= select_ln878_1_fu_265_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        size_l_reg_584 <= 22'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            size_l_reg_584 <= size_l_fu_331_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        size_l_reg_584_pp0_iter2_reg <= 22'd0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_11001)) begin
            size_l_reg_584_pp0_iter2_reg <= size_l_reg_584;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sub_ln146_reg_610 <= 26'd0;
    end else begin
        if (((p_vld_reg_550 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            sub_ln146_reg_610 <= sub_ln146_fu_381_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sub_ln44_reg_540 <= 22'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            sub_ln44_reg_540 <= sub_ln44_fu_205_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        tmp_2_reg_523 <= 24'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            tmp_2_reg_523 <= writePSN_l_V_TDATA_int_regslice;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        tmp_reg_515 <= 24'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            tmp_reg_515 <= readPSN_l_V_TDATA_int_regslice;
        end
    end
end

always @ (*) begin
    if (((1'b1 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if (((1'b1 == 1'b1) & (header_s_V_TVALID_int_regslice == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        header_s_V_TREADY_int_regslice = 1'b1;
    end else begin
        header_s_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        readPSN_l_V_TDATA_blk_n = readPSN_l_V_TVALID_int_regslice;
    end else begin
        readPSN_l_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        readPSN_l_V_TREADY_int_regslice = 1'b1;
    end else begin
        readPSN_l_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((p_vld_reg_550_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((p_vld_reg_550_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        resp_msn_V_TDATA_blk_n = resp_msn_V_TREADY_int_regslice;
    end else begin
        resp_msn_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((p_vld_reg_550_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        resp_msn_V_TVALID_int_regslice = 1'b1;
    end else begin
        resp_msn_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((p_vld_reg_550_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((p_vld_reg_550_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        resp_psn_o_V_TDATA_blk_n = resp_psn_o_V_TREADY_int_regslice;
    end else begin
        resp_psn_o_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((p_vld_reg_550_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        resp_psn_o_V_TVALID_int_regslice = 1'b1;
    end else begin
        resp_psn_o_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((p_vld_reg_550_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((p_vld_reg_550_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        resp_qp_o_V_TDATA_blk_n = resp_qp_o_V_TREADY_int_regslice;
    end else begin
        resp_qp_o_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((p_vld_reg_550_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        resp_qp_o_V_TVALID_int_regslice = 1'b1;
    end else begin
        resp_qp_o_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((p_vld_reg_550_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((p_vld_reg_550_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        resp_syndrome_o_V_TDATA_blk_n = resp_syndrome_o_V_TREADY_int_regslice;
    end else begin
        resp_syndrome_o_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((p_vld_reg_550_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        resp_syndrome_o_V_TVALID_int_regslice = 1'b1;
    end else begin
        resp_syndrome_o_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        size_o_V_TDATA_blk_n = size_o_V_TREADY_int_regslice;
    end else begin
        size_o_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        size_o_V_TVALID_int_regslice = 1'b1;
    end else begin
        size_o_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((phi_ln874_reg_620_pp0_iter3_reg == 1'd1) & (p_vld_reg_550_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((phi_ln874_reg_620 == 1'd1) & (p_vld_reg_550_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        statBitMap_address_i_V_TDATA_blk_n = statBitMap_address_i_V_TREADY_int_regslice;
    end else begin
        statBitMap_address_i_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_predicate_op80_write_state4 == 1'b1))) begin
        statBitMap_address_i_V_TVALID_int_regslice = 1'b1;
    end else begin
        statBitMap_address_i_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((phi_ln874_reg_620_pp0_iter3_reg == 1'd1) & (p_vld_reg_550_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((phi_ln874_reg_620 == 1'd1) & (p_vld_reg_550_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        statBitMap_data_i_V_TDATA_blk_n = statBitMap_data_i_V_TREADY_int_regslice;
    end else begin
        statBitMap_data_i_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_predicate_op82_write_state4 == 1'b1))) begin
        statBitMap_data_i_V_TVALID_int_regslice = 1'b1;
    end else begin
        statBitMap_data_i_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        writePSN_l_V_TDATA_blk_n = writePSN_l_V_TVALID_int_regslice;
    end else begin
        writePSN_l_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        writePSN_l_V_TREADY_int_regslice = 1'b1;
    end else begin
        writePSN_l_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln146_1_fu_375_p2 = ($signed(sext_ln146_fu_371_p1) + $signed(sext_ln0_1_fu_337_p1));

assign add_ln146_2_fu_387_p2 = ($signed(zext_ln140_fu_347_p1) + $signed(25'd33554431));

assign add_ln146_fu_365_p2 = ($signed(zext_ln139_fu_344_p1) + $signed(25'd33554431));

assign and_ln878_1_fu_259_p2 = (xor_ln878_fu_253_p2 & icmp_ln878_fu_165_p2);

assign and_ln878_2_fu_326_p2 = (xor_ln878_1_fu_321_p2 & icmp_ln878_1_reg_535);

assign and_ln878_fu_239_p2 = (icmp_ln878_fu_165_p2 & icmp_ln878_1_fu_171_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((1'b1 == 1'b1) & ((writePSN_l_V_TVALID_int_regslice == 1'b0) | (readPSN_l_V_TVALID_int_regslice == 1'b0))) | ((ap_enable_reg_pp0_iter4 == 1'b1) & ((size_o_V_TREADY_int_regslice == 1'b0) | (regslice_both_size_o_V_U_apdone_blk == 1'b1) | (regslice_both_statBitMap_data_i_V_U_apdone_blk == 1'b1) | (regslice_both_statBitMap_address_i_V_U_apdone_blk == 1'b1) | (regslice_both_resp_msn_V_U_apdone_blk == 1'b1) | (regslice_both_resp_syndrome_o_V_U_apdone_blk == 1'b1) | (regslice_both_resp_psn_o_V_U_apdone_blk == 1'b1) | (regslice_both_resp_qp_o_V_U_apdone_blk == 1'b1) | ((statBitMap_data_i_V_TREADY_int_regslice == 1'b0) & (ap_predicate_op112_write_state5 == 1'b1)) | ((statBitMap_address_i_V_TREADY_int_regslice == 1'b0) & (ap_predicate_op111_write_state5 == 1'b1)) | ((resp_msn_V_TREADY_int_regslice == 1'b0) & (p_vld_reg_550_pp0_iter3_reg == 1'd1)) | ((resp_syndrome_o_V_TREADY_int_regslice == 1'b0) & (p_vld_reg_550_pp0_iter3_reg == 1'd1)) | ((p_vld_reg_550_pp0_iter3_reg == 1'd1) & (resp_psn_o_V_TREADY_int_regslice == 1'b0)) | ((p_vld_reg_550_pp0_iter3_reg == 1'd1) & (resp_qp_o_V_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter3 == 1'b1) & ((size_o_V_TREADY_int_regslice == 1'b0) | ((statBitMap_data_i_V_TREADY_int_regslice == 1'b0) & (ap_predicate_op82_write_state4 == 1'b1)) | ((statBitMap_address_i_V_TREADY_int_regslice == 1'b0) & (ap_predicate_op80_write_state4 == 1'b1)) | ((resp_msn_V_TREADY_int_regslice == 1'b0) & (p_vld_reg_550_pp0_iter2_reg == 1'd1)) | ((resp_syndrome_o_V_TREADY_int_regslice == 1'b0) & (p_vld_reg_550_pp0_iter2_reg == 1'd1)) | ((resp_psn_o_V_TREADY_int_regslice == 1'b0) & (p_vld_reg_550_pp0_iter2_reg == 1'd1)) | ((resp_qp_o_V_TREADY_int_regslice == 1'b0) & (p_vld_reg_550_pp0_iter2_reg == 1'd1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == 1'b1) & ((writePSN_l_V_TVALID_int_regslice == 1'b0) | (readPSN_l_V_TVALID_int_regslice == 1'b0))) | ((ap_enable_reg_pp0_iter4 == 1'b1) & ((size_o_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state5_io) | (regslice_both_size_o_V_U_apdone_blk == 1'b1) | (regslice_both_statBitMap_data_i_V_U_apdone_blk == 1'b1) | (regslice_both_statBitMap_address_i_V_U_apdone_blk == 1'b1) | (regslice_both_resp_msn_V_U_apdone_blk == 1'b1) | (regslice_both_resp_syndrome_o_V_U_apdone_blk == 1'b1) | (regslice_both_resp_psn_o_V_U_apdone_blk == 1'b1) | (regslice_both_resp_qp_o_V_U_apdone_blk == 1'b1) | ((statBitMap_data_i_V_TREADY_int_regslice == 1'b0) & (ap_predicate_op112_write_state5 == 1'b1)) | ((statBitMap_address_i_V_TREADY_int_regslice == 1'b0) & (ap_predicate_op111_write_state5 == 1'b1)) | ((resp_msn_V_TREADY_int_regslice == 1'b0) & (p_vld_reg_550_pp0_iter3_reg == 1'd1)) | ((resp_syndrome_o_V_TREADY_int_regslice == 1'b0) & (p_vld_reg_550_pp0_iter3_reg == 1'd1)) | ((p_vld_reg_550_pp0_iter3_reg == 1'd1) & (resp_psn_o_V_TREADY_int_regslice == 1'b0)) | ((p_vld_reg_550_pp0_iter3_reg == 1'd1) & (resp_qp_o_V_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter3 == 1'b1) & ((size_o_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state4_io) | ((statBitMap_data_i_V_TREADY_int_regslice == 1'b0) & (ap_predicate_op82_write_state4 == 1'b1)) | ((statBitMap_address_i_V_TREADY_int_regslice == 1'b0) & (ap_predicate_op80_write_state4 == 1'b1)) | ((resp_msn_V_TREADY_int_regslice == 1'b0) & (p_vld_reg_550_pp0_iter2_reg == 1'd1)) | ((resp_syndrome_o_V_TREADY_int_regslice == 1'b0) & (p_vld_reg_550_pp0_iter2_reg == 1'd1)) | ((resp_psn_o_V_TREADY_int_regslice == 1'b0) & (p_vld_reg_550_pp0_iter2_reg == 1'd1)) | ((resp_qp_o_V_TREADY_int_regslice == 1'b0) & (p_vld_reg_550_pp0_iter2_reg == 1'd1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == 1'b1) & ((writePSN_l_V_TVALID_int_regslice == 1'b0) | (readPSN_l_V_TVALID_int_regslice == 1'b0))) | ((ap_enable_reg_pp0_iter4 == 1'b1) & ((size_o_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state5_io) | (regslice_both_size_o_V_U_apdone_blk == 1'b1) | (regslice_both_statBitMap_data_i_V_U_apdone_blk == 1'b1) | (regslice_both_statBitMap_address_i_V_U_apdone_blk == 1'b1) | (regslice_both_resp_msn_V_U_apdone_blk == 1'b1) | (regslice_both_resp_syndrome_o_V_U_apdone_blk == 1'b1) | (regslice_both_resp_psn_o_V_U_apdone_blk == 1'b1) | (regslice_both_resp_qp_o_V_U_apdone_blk == 1'b1) | ((statBitMap_data_i_V_TREADY_int_regslice == 1'b0) & (ap_predicate_op112_write_state5 == 1'b1)) | ((statBitMap_address_i_V_TREADY_int_regslice == 1'b0) & (ap_predicate_op111_write_state5 == 1'b1)) | ((resp_msn_V_TREADY_int_regslice == 1'b0) & (p_vld_reg_550_pp0_iter3_reg == 1'd1)) | ((resp_syndrome_o_V_TREADY_int_regslice == 1'b0) & (p_vld_reg_550_pp0_iter3_reg == 1'd1)) | ((p_vld_reg_550_pp0_iter3_reg == 1'd1) & (resp_psn_o_V_TREADY_int_regslice == 1'b0)) | ((p_vld_reg_550_pp0_iter3_reg == 1'd1) & (resp_qp_o_V_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter3 == 1'b1) & ((size_o_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state4_io) | ((statBitMap_data_i_V_TREADY_int_regslice == 1'b0) & (ap_predicate_op82_write_state4 == 1'b1)) | ((statBitMap_address_i_V_TREADY_int_regslice == 1'b0) & (ap_predicate_op80_write_state4 == 1'b1)) | ((resp_msn_V_TREADY_int_regslice == 1'b0) & (p_vld_reg_550_pp0_iter2_reg == 1'd1)) | ((resp_syndrome_o_V_TREADY_int_regslice == 1'b0) & (p_vld_reg_550_pp0_iter2_reg == 1'd1)) | ((resp_psn_o_V_TREADY_int_regslice == 1'b0) & (p_vld_reg_550_pp0_iter2_reg == 1'd1)) | ((resp_qp_o_V_TREADY_int_regslice == 1'b0) & (p_vld_reg_550_pp0_iter2_reg == 1'd1)))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((writePSN_l_V_TVALID_int_regslice == 1'b0) | (readPSN_l_V_TVALID_int_regslice == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((size_o_V_TREADY_int_regslice == 1'b0) | ((statBitMap_data_i_V_TREADY_int_regslice == 1'b0) & (ap_predicate_op82_write_state4 == 1'b1)) | ((statBitMap_address_i_V_TREADY_int_regslice == 1'b0) & (ap_predicate_op80_write_state4 == 1'b1)) | ((resp_msn_V_TREADY_int_regslice == 1'b0) & (p_vld_reg_550_pp0_iter2_reg == 1'd1)) | ((resp_syndrome_o_V_TREADY_int_regslice == 1'b0) & (p_vld_reg_550_pp0_iter2_reg == 1'd1)) | ((resp_psn_o_V_TREADY_int_regslice == 1'b0) & (p_vld_reg_550_pp0_iter2_reg == 1'd1)) | ((resp_qp_o_V_TREADY_int_regslice == 1'b0) & (p_vld_reg_550_pp0_iter2_reg == 1'd1)));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = ((size_o_V_TREADY_int_regslice == 1'b0) | ((statBitMap_data_i_V_TREADY_int_regslice == 1'b0) & (ap_predicate_op82_write_state4 == 1'b1)) | ((statBitMap_address_i_V_TREADY_int_regslice == 1'b0) & (ap_predicate_op80_write_state4 == 1'b1)) | ((resp_msn_V_TREADY_int_regslice == 1'b0) & (p_vld_reg_550_pp0_iter2_reg == 1'd1)) | ((resp_syndrome_o_V_TREADY_int_regslice == 1'b0) & (p_vld_reg_550_pp0_iter2_reg == 1'd1)) | ((resp_psn_o_V_TREADY_int_regslice == 1'b0) & (p_vld_reg_550_pp0_iter2_reg == 1'd1)) | ((resp_qp_o_V_TREADY_int_regslice == 1'b0) & (p_vld_reg_550_pp0_iter2_reg == 1'd1)));
end

always @ (*) begin
    ap_block_state5_io = ((size_o_V_TREADY_int_regslice == 1'b0) | ((statBitMap_data_i_V_TREADY_int_regslice == 1'b0) & (ap_predicate_op112_write_state5 == 1'b1)) | ((statBitMap_address_i_V_TREADY_int_regslice == 1'b0) & (ap_predicate_op111_write_state5 == 1'b1)) | ((resp_msn_V_TREADY_int_regslice == 1'b0) & (p_vld_reg_550_pp0_iter3_reg == 1'd1)) | ((resp_syndrome_o_V_TREADY_int_regslice == 1'b0) & (p_vld_reg_550_pp0_iter3_reg == 1'd1)) | ((p_vld_reg_550_pp0_iter3_reg == 1'd1) & (resp_psn_o_V_TREADY_int_regslice == 1'b0)) | ((p_vld_reg_550_pp0_iter3_reg == 1'd1) & (resp_qp_o_V_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter4 = ((size_o_V_TREADY_int_regslice == 1'b0) | (regslice_both_size_o_V_U_apdone_blk == 1'b1) | (regslice_both_statBitMap_data_i_V_U_apdone_blk == 1'b1) | (regslice_both_statBitMap_address_i_V_U_apdone_blk == 1'b1) | (regslice_both_resp_msn_V_U_apdone_blk == 1'b1) | (regslice_both_resp_syndrome_o_V_U_apdone_blk == 1'b1) | (regslice_both_resp_psn_o_V_U_apdone_blk == 1'b1) | (regslice_both_resp_qp_o_V_U_apdone_blk == 1'b1) | ((statBitMap_data_i_V_TREADY_int_regslice == 1'b0) & (ap_predicate_op112_write_state5 == 1'b1)) | ((statBitMap_address_i_V_TREADY_int_regslice == 1'b0) & (ap_predicate_op111_write_state5 == 1'b1)) | ((resp_msn_V_TREADY_int_regslice == 1'b0) & (p_vld_reg_550_pp0_iter3_reg == 1'd1)) | ((resp_syndrome_o_V_TREADY_int_regslice == 1'b0) & (p_vld_reg_550_pp0_iter3_reg == 1'd1)) | ((p_vld_reg_550_pp0_iter3_reg == 1'd1) & (resp_psn_o_V_TREADY_int_regslice == 1'b0)) | ((p_vld_reg_550_pp0_iter3_reg == 1'd1) & (resp_qp_o_V_TREADY_int_regslice == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op111_write_state5 = ((phi_ln874_reg_620_pp0_iter3_reg == 1'd1) & (p_vld_reg_550_pp0_iter3_reg == 1'd1));
end

always @ (*) begin
    ap_predicate_op112_write_state5 = ((phi_ln874_reg_620_pp0_iter3_reg == 1'd1) & (p_vld_reg_550_pp0_iter3_reg == 1'd1));
end

always @ (*) begin
    ap_predicate_op80_write_state4 = ((phi_ln874_reg_620 == 1'd1) & (p_vld_reg_550_pp0_iter2_reg == 1'd1));
end

always @ (*) begin
    ap_predicate_op82_write_state4 = ((phi_ln874_reg_620 == 1'd1) & (p_vld_reg_550_pp0_iter2_reg == 1'd1));
end

assign header_s_V_TREADY = regslice_both_header_s_V_U_ack_in;

assign header_s_V_read_nbread_fu_102_p2_0 = header_s_V_TVALID_int_regslice;

assign icmp_ln174_fu_497_p2 = ((p_Result_s_fu_479_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln870_1_fu_357_p2 = ((tmp_reg_515 == tmp_2_reg_523) ? 1'b1 : 1'b0);

assign icmp_ln870_fu_353_p2 = ((tmp_reg_515 == resp_bth_psn_V_reg_560) ? 1'b1 : 1'b0);

assign icmp_ln878_1_fu_171_p2 = ((write_r_fu_161_p1 < read_r_fu_157_p1) ? 1'b1 : 1'b0);

assign icmp_ln878_fu_165_p2 = ((writePSN_l_V_TDATA_int_regslice < readPSN_l_V_TDATA_int_regslice) ? 1'b1 : 1'b0);

assign icmp_ln882_1_fu_407_p2 = (($signed(zext_ln18_1_fu_399_p1) < $signed(sub_ln146_reg_610)) ? 1'b1 : 1'b0);

assign icmp_ln882_fu_361_p2 = ((resp_bth_psn_V_reg_560 < tmp_reg_515) ? 1'b1 : 1'b0);

assign icmp_ln890_1_fu_393_p2 = (($signed(add_ln146_2_fu_387_p2) < $signed(zext_ln18_fu_341_p1)) ? 1'b1 : 1'b0);

assign icmp_ln890_fu_402_p2 = (($signed(zext_ln18_1_fu_399_p1) > $signed(add_ln146_1_reg_605)) ? 1'b1 : 1'b0);

assign or_ln1_fu_211_p3 = {{1'd1}, {read_r_fu_157_p1}};

assign or_ln870_fu_423_p2 = (icmp_ln870_reg_589 | icmp_ln870_1_reg_595);

assign or_ln890_1_fu_432_p2 = (or_ln890_fu_427_p2 | or_ln870_fu_423_p2);

assign or_ln890_fu_427_p2 = (icmp_ln890_fu_402_p2 | icmp_ln882_reg_600);

assign or_ln_fu_185_p3 = {{1'd1}, {write_r_fu_161_p1}};

assign p_Result_s_fu_479_p4 = {{p_s_reg_554_pp0_iter1_reg[167:165]}};

assign phi_ln874_fu_474_p2 = (tmp37_fu_468_p2 | icmp_ln870_reg_589);

assign readPSN_l_V_TREADY = regslice_both_readPSN_l_V_U_ack_in;

assign read_r_fu_157_p1 = readPSN_l_V_TDATA_int_regslice[19:0];

assign resp_msn_V_TVALID = regslice_both_resp_msn_V_U_vld_out;

assign resp_psn_o_V_TVALID = regslice_both_resp_psn_o_V_U_vld_out;

assign resp_qp_o_V_TVALID = regslice_both_resp_qp_o_V_U_vld_out;

assign resp_syndrome_o_V_TVALID = regslice_both_resp_syndrome_o_V_U_vld_out;

assign ret_fu_229_p2 = (zext_ln1347_1_fu_181_p1 - zext_ln44_fu_197_p1);

assign sel_tmp31_fu_462_p2 = (tmp36_fu_456_p2 & tmp35_fu_450_p2);

assign select_ln878_1_fu_265_p3 = ((and_ln878_1_fu_259_p2[0:0] == 1'b1) ? sub_ln46_fu_223_p2 : select_ln878_fu_245_p3);

assign select_ln878_fu_245_p3 = ((and_ln878_fu_239_p2[0:0] == 1'b1) ? sub_ln44_fu_205_p2 : sext_ln878_fu_235_p1);

assign sext_ln0_1_fu_337_p1 = size_l_fu_331_p3;

assign sext_ln146_fu_371_p1 = $signed(add_ln146_fu_365_p2);

assign sext_ln878_fu_235_p1 = $signed(ret_fu_229_p2);

assign size_l_fu_331_p3 = ((and_ln878_2_fu_326_p2[0:0] == 1'b1) ? sub_ln44_reg_540 : select_ln878_1_reg_545);

assign size_o_V_TDATA_int_regslice = $signed(size_l_reg_584_pp0_iter2_reg);

assign size_o_V_TVALID = regslice_both_size_o_V_U_vld_out;

assign statBitMap_address_i_V_TDATA_int_regslice = p_Result_1_reg_624;

assign statBitMap_address_i_V_TVALID = regslice_both_statBitMap_address_i_V_U_vld_out;

assign statBitMap_data_i_V_TDATA_int_regslice = icmp_ln174_reg_629;

assign statBitMap_data_i_V_TVALID = regslice_both_statBitMap_data_i_V_U_vld_out;

assign sub_ln146_fu_381_p2 = ($signed(zext_ln140_1_fu_350_p1) - $signed(sext_ln0_1_fu_337_p1));

assign sub_ln44_fu_205_p2 = (zext_ln1347_2_fu_193_p1 - zext_ln44_1_fu_201_p1);

assign sub_ln46_fu_223_p2 = (zext_ln46_fu_219_p1 - zext_ln1347_fu_177_p1);

assign tmp35_fu_450_p2 = (xor_ln890_1_fu_418_p2 & xor_ln882_fu_412_p2);

assign tmp36_fu_456_p2 = (xor_ln870_fu_444_p2 & or_ln890_fu_427_p2);

assign tmp37_fu_468_p2 = (xor_ln890_fu_438_p2 | sel_tmp31_fu_462_p2);

assign writePSN_l_V_TREADY = regslice_both_writePSN_l_V_U_ack_in;

assign write_r_fu_161_p1 = writePSN_l_V_TDATA_int_regslice[19:0];

assign xor_ln870_fu_444_p2 = (or_ln870_fu_423_p2 ^ 1'd1);

assign xor_ln878_1_fu_321_p2 = (icmp_ln878_reg_530 ^ 1'd1);

assign xor_ln878_fu_253_p2 = (icmp_ln878_1_fu_171_p2 ^ 1'd1);

assign xor_ln882_fu_412_p2 = (icmp_ln882_1_fu_407_p2 ^ 1'd1);

assign xor_ln890_1_fu_418_p2 = (icmp_ln890_1_reg_615 ^ 1'd1);

assign xor_ln890_fu_438_p2 = (or_ln890_1_fu_432_p2 ^ 1'd1);

assign zext_ln1347_1_fu_181_p1 = write_r_fu_161_p1;

assign zext_ln1347_2_fu_193_p1 = or_ln_fu_185_p3;

assign zext_ln1347_fu_177_p1 = write_r_fu_161_p1;

assign zext_ln139_fu_344_p1 = tmp_reg_515;

assign zext_ln140_1_fu_350_p1 = tmp_2_reg_523;

assign zext_ln140_fu_347_p1 = tmp_2_reg_523;

assign zext_ln18_1_fu_399_p1 = resp_bth_psn_V_reg_560_pp0_iter1_reg;

assign zext_ln18_fu_341_p1 = resp_bth_psn_V_reg_560;

assign zext_ln44_1_fu_201_p1 = read_r_fu_157_p1;

assign zext_ln44_fu_197_p1 = read_r_fu_157_p1;

assign zext_ln46_fu_219_p1 = or_ln1_fu_211_p3;

endmodule //tx_checkResponce_dev
