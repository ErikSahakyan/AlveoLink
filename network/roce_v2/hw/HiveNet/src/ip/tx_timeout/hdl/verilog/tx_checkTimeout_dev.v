// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="tx_checkTimeout_dev_tx_checkTimeout_dev,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu55c-fsvh2892-2L-e,HLS_INPUT_CLOCK=2.500000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=1.825000,HLS_SYN_LAT=19,HLS_SYN_TPT=18,HLS_SYN_MEM=16,HLS_SYN_DSP=0,HLS_SYN_FF=2803,HLS_SYN_LUT=2321,HLS_VERSION=2020_2}" *)

module tx_checkTimeout_dev (
        ap_clk,
        ap_rst_n,
        timer,
        timeoutInNs,
        m_axi_header_AWVALID,
        m_axi_header_AWREADY,
        m_axi_header_AWADDR,
        m_axi_header_AWID,
        m_axi_header_AWLEN,
        m_axi_header_AWSIZE,
        m_axi_header_AWBURST,
        m_axi_header_AWLOCK,
        m_axi_header_AWCACHE,
        m_axi_header_AWPROT,
        m_axi_header_AWQOS,
        m_axi_header_AWREGION,
        m_axi_header_AWUSER,
        m_axi_header_WVALID,
        m_axi_header_WREADY,
        m_axi_header_WDATA,
        m_axi_header_WSTRB,
        m_axi_header_WLAST,
        m_axi_header_WID,
        m_axi_header_WUSER,
        m_axi_header_ARVALID,
        m_axi_header_ARREADY,
        m_axi_header_ARADDR,
        m_axi_header_ARID,
        m_axi_header_ARLEN,
        m_axi_header_ARSIZE,
        m_axi_header_ARBURST,
        m_axi_header_ARLOCK,
        m_axi_header_ARCACHE,
        m_axi_header_ARPROT,
        m_axi_header_ARQOS,
        m_axi_header_ARREGION,
        m_axi_header_ARUSER,
        m_axi_header_RVALID,
        m_axi_header_RREADY,
        m_axi_header_RDATA,
        m_axi_header_RLAST,
        m_axi_header_RID,
        m_axi_header_RUSER,
        m_axi_header_RRESP,
        m_axi_header_BVALID,
        m_axi_header_BREADY,
        m_axi_header_BRESP,
        m_axi_header_BID,
        m_axi_header_BUSER,
        address_i_V_TDATA,
        address_i_V_TVALID,
        address_i_V_TREADY,
        data_i_V_TDATA,
        data_i_V_TVALID,
        data_i_V_TREADY,
        readPSN_l_V_TDATA,
        readPSN_l_V_TVALID,
        readPSN_l_V_TREADY,
        writePSN_l_V_TDATA,
        writePSN_l_V_TVALID,
        writePSN_l_V_TREADY,
        currentPacketStatus,
        currentPacketStatus_ap_vld,
        sleep_o,
        sleep_o_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 18'd1;
parameter    ap_ST_fsm_pp0_stage1 = 18'd2;
parameter    ap_ST_fsm_pp0_stage2 = 18'd4;
parameter    ap_ST_fsm_pp0_stage3 = 18'd8;
parameter    ap_ST_fsm_pp0_stage4 = 18'd16;
parameter    ap_ST_fsm_pp0_stage5 = 18'd32;
parameter    ap_ST_fsm_pp0_stage6 = 18'd64;
parameter    ap_ST_fsm_pp0_stage7 = 18'd128;
parameter    ap_ST_fsm_pp0_stage8 = 18'd256;
parameter    ap_ST_fsm_pp0_stage9 = 18'd512;
parameter    ap_ST_fsm_pp0_stage10 = 18'd1024;
parameter    ap_ST_fsm_pp0_stage11 = 18'd2048;
parameter    ap_ST_fsm_pp0_stage12 = 18'd4096;
parameter    ap_ST_fsm_pp0_stage13 = 18'd8192;
parameter    ap_ST_fsm_pp0_stage14 = 18'd16384;
parameter    ap_ST_fsm_pp0_stage15 = 18'd32768;
parameter    ap_ST_fsm_pp0_stage16 = 18'd65536;
parameter    ap_ST_fsm_pp0_stage17 = 18'd131072;
parameter    C_M_AXI_HEADER_ID_WIDTH = 1;
parameter    C_M_AXI_HEADER_ADDR_WIDTH = 64;
parameter    C_M_AXI_HEADER_DATA_WIDTH = 256;
parameter    C_M_AXI_HEADER_AWUSER_WIDTH = 1;
parameter    C_M_AXI_HEADER_ARUSER_WIDTH = 1;
parameter    C_M_AXI_HEADER_WUSER_WIDTH = 1;
parameter    C_M_AXI_HEADER_RUSER_WIDTH = 1;
parameter    C_M_AXI_HEADER_BUSER_WIDTH = 1;
parameter    C_M_AXI_HEADER_TARGET_ADDR = 0;
parameter    C_M_AXI_HEADER_USER_VALUE = 0;
parameter    C_M_AXI_HEADER_PROT_VALUE = 0;
parameter    C_M_AXI_HEADER_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_M_AXI_HEADER_WSTRB_WIDTH = (256 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [63:0] timer;
input  [63:0] timeoutInNs;
output   m_axi_header_AWVALID;
input   m_axi_header_AWREADY;
output  [C_M_AXI_HEADER_ADDR_WIDTH - 1:0] m_axi_header_AWADDR;
output  [C_M_AXI_HEADER_ID_WIDTH - 1:0] m_axi_header_AWID;
output  [7:0] m_axi_header_AWLEN;
output  [2:0] m_axi_header_AWSIZE;
output  [1:0] m_axi_header_AWBURST;
output  [1:0] m_axi_header_AWLOCK;
output  [3:0] m_axi_header_AWCACHE;
output  [2:0] m_axi_header_AWPROT;
output  [3:0] m_axi_header_AWQOS;
output  [3:0] m_axi_header_AWREGION;
output  [C_M_AXI_HEADER_AWUSER_WIDTH - 1:0] m_axi_header_AWUSER;
output   m_axi_header_WVALID;
input   m_axi_header_WREADY;
output  [C_M_AXI_HEADER_DATA_WIDTH - 1:0] m_axi_header_WDATA;
output  [C_M_AXI_HEADER_WSTRB_WIDTH - 1:0] m_axi_header_WSTRB;
output   m_axi_header_WLAST;
output  [C_M_AXI_HEADER_ID_WIDTH - 1:0] m_axi_header_WID;
output  [C_M_AXI_HEADER_WUSER_WIDTH - 1:0] m_axi_header_WUSER;
output   m_axi_header_ARVALID;
input   m_axi_header_ARREADY;
output  [C_M_AXI_HEADER_ADDR_WIDTH - 1:0] m_axi_header_ARADDR;
output  [C_M_AXI_HEADER_ID_WIDTH - 1:0] m_axi_header_ARID;
output  [7:0] m_axi_header_ARLEN;
output  [2:0] m_axi_header_ARSIZE;
output  [1:0] m_axi_header_ARBURST;
output  [1:0] m_axi_header_ARLOCK;
output  [3:0] m_axi_header_ARCACHE;
output  [2:0] m_axi_header_ARPROT;
output  [3:0] m_axi_header_ARQOS;
output  [3:0] m_axi_header_ARREGION;
output  [C_M_AXI_HEADER_ARUSER_WIDTH - 1:0] m_axi_header_ARUSER;
input   m_axi_header_RVALID;
output   m_axi_header_RREADY;
input  [C_M_AXI_HEADER_DATA_WIDTH - 1:0] m_axi_header_RDATA;
input   m_axi_header_RLAST;
input  [C_M_AXI_HEADER_ID_WIDTH - 1:0] m_axi_header_RID;
input  [C_M_AXI_HEADER_RUSER_WIDTH - 1:0] m_axi_header_RUSER;
input  [1:0] m_axi_header_RRESP;
input   m_axi_header_BVALID;
output   m_axi_header_BREADY;
input  [1:0] m_axi_header_BRESP;
input  [C_M_AXI_HEADER_ID_WIDTH - 1:0] m_axi_header_BID;
input  [C_M_AXI_HEADER_BUSER_WIDTH - 1:0] m_axi_header_BUSER;
output  [23:0] address_i_V_TDATA;
output   address_i_V_TVALID;
input   address_i_V_TREADY;
output  [7:0] data_i_V_TDATA;
output   data_i_V_TVALID;
input   data_i_V_TREADY;
input  [23:0] readPSN_l_V_TDATA;
input   readPSN_l_V_TVALID;
output   readPSN_l_V_TREADY;
input  [23:0] writePSN_l_V_TDATA;
input   writePSN_l_V_TVALID;
output   writePSN_l_V_TREADY;
input  [1:0] currentPacketStatus;
input   currentPacketStatus_ap_vld;
output  [63:0] sleep_o;
output   sleep_o_ap_vld;

reg sleep_o_ap_vld;

(* shreg_extract = "no" *) reg    ap_rst_reg_2;
(* shreg_extract = "no" *) reg    ap_rst_reg_1;
(* shreg_extract = "no" *) reg    ap_rst_n_inv;
reg   [1:0] currentPacketStatus_preg;
reg   [1:0] currentPacketStatus_in_sig;
reg    currentPacketStatus_ap_vld_preg;
reg    currentPacketStatus_ap_vld_in_sig;
reg   [63:0] sleep_V;
reg    header_blk_n_AR;
(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
reg   [0:0] icmp_ln870_reg_428;
reg   [0:0] icmp_ln870_1_reg_448;
reg   [0:0] icmp_ln870_2_reg_452;
reg    header_blk_n_R;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_pp0_stage9;
reg    address_i_V_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage12;
wire    ap_block_pp0_stage12;
reg   [0:0] icmp_ln886_reg_489;
wire    ap_CS_fsm_pp0_stage13;
wire    ap_block_pp0_stage13;
reg    data_i_V_TDATA_blk_n;
reg    readPSN_l_V_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0;
reg    writePSN_l_V_TDATA_blk_n;
reg    currentPacketStatus_blk_n;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
wire   [0:0] icmp_ln870_1_fu_214_p2;
wire    header_AWREADY;
wire    header_WREADY;
reg    header_ARVALID;
wire    header_ARREADY;
wire    header_RVALID;
reg    header_RREADY;
wire   [255:0] header_RDATA;
wire    header_RLAST;
wire   [0:0] header_RID;
wire   [0:0] header_RUSER;
wire   [1:0] header_RRESP;
wire    header_BVALID;
wire   [1:0] header_BRESP;
wire   [0:0] header_BID;
wire   [0:0] header_BUSER;
reg   [23:0] tmp_5_reg_423;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state19_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln870_fu_194_p2;
reg   [0:0] icmp_ln870_reg_428_pp0_iter1_reg;
reg   [63:0] timeoutInNs_read_reg_432;
reg   [63:0] sleep_V_load_reg_442;
reg    ap_predicate_op31_read_state2;
reg    ap_block_state2_pp0_stage1_iter0;
wire    regslice_both_address_i_V_U_apdone_blk;
wire    regslice_both_data_i_V_U_apdone_blk;
reg    ap_block_state20_pp0_stage1_iter1;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage1_11001;
wire   [0:0] icmp_ln870_2_fu_220_p2;
wire   [19:0] bitAddress_V_fu_226_p1;
reg   [19:0] bitAddress_V_reg_456;
reg   [25:0] HBMaddress_V_reg_461;
wire    ap_block_state3_pp0_stage2_iter0;
reg    ap_predicate_op70_readreq_state3;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage2_11001;
reg   [57:0] tmp_reg_472;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_11001;
reg   [63:0] header_time_V_reg_477;
reg    ap_predicate_op85_read_state10;
reg    ap_block_state10_pp0_stage9_iter0;
reg    ap_block_pp0_stage9_11001;
wire  signed [64:0] ret_1_fu_326_p2;
reg  signed [64:0] ret_1_reg_482;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_state11_pp0_stage10_iter0;
wire    ap_block_pp0_stage10_11001;
wire   [0:0] icmp_ln886_fu_335_p2;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_state12_pp0_stage11_iter0;
wire    ap_block_pp0_stage11_11001;
reg   [0:0] tmp_2_reg_498;
reg    ap_predicate_op99_write_state13;
reg    ap_predicate_op100_write_state13;
reg    ap_block_state13_pp0_stage12_iter0;
reg    ap_block_state13_io;
reg    ap_block_pp0_stage12_11001;
wire   [130:0] grp_fu_343_p2;
reg   [130:0] mul_ln1364_1_reg_509;
wire    ap_CS_fsm_pp0_stage16;
wire    ap_block_state17_pp0_stage16_iter0;
wire    ap_block_pp0_stage16_11001;
reg   [62:0] tmp_4_reg_514;
wire   [130:0] sub_ln1364_fu_376_p2;
reg   [130:0] sub_ln1364_reg_520;
wire    ap_CS_fsm_pp0_stage17;
wire    ap_block_state18_pp0_stage17_iter0;
wire    ap_block_pp0_stage17_11001;
wire   [62:0] sub_ln1364_1_fu_396_p2;
reg   [62:0] sub_ln1364_1_reg_525;
reg    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage17_subdone;
wire   [63:0] zext_ln534_fu_280_p1;
wire  signed [63:0] sext_ln24_fu_413_p1;
reg   [63:0] ap_sig_allocacmp_sleep_V_load;
wire   [63:0] zext_ln1364_1_fu_300_p1;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state7_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_11001;
wire   [63:0] add_ln692_fu_269_p2;
wire    ap_block_pp0_stage2_01001;
reg    ap_block_pp0_stage12_01001;
wire   [63:0] grp_fu_204_p0;
wire   [65:0] grp_fu_204_p1;
wire   [29:0] shl_ln_fu_229_p3;
wire   [24:0] shl_ln1345_1_fu_241_p3;
wire   [30:0] zext_ln1345_fu_237_p1;
wire   [30:0] zext_ln1345_1_fu_249_p1;
wire   [30:0] ret_fu_253_p2;
wire   [128:0] grp_fu_204_p2;
wire    ap_block_pp0_stage5;
wire    ap_block_pp0_stage6;
wire    ap_block_pp0_stage10;
wire   [64:0] zext_ln215_fu_319_p1;
wire   [64:0] zext_ln215_1_fu_323_p1;
wire    ap_block_pp0_stage11;
wire   [64:0] zext_ln886_fu_332_p1;
wire   [66:0] grp_fu_343_p1;
wire    ap_block_pp0_stage16;
wire    ap_block_pp0_stage17;
wire   [62:0] tmp_3_fu_381_p4;
wire   [62:0] select_ln1364_fu_390_p3;
wire   [62:0] select_ln1364_1_fu_402_p3;
wire   [62:0] add_ln213_fu_407_p2;
reg    grp_fu_204_ce;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
wire    ap_CS_fsm_pp0_stage4;
reg    grp_fu_343_ce;
reg    ap_predicate_op103_write_state14;
reg    ap_predicate_op104_write_state14;
reg    ap_block_state14_pp0_stage13_iter0;
reg    ap_block_state14_io;
reg    ap_block_pp0_stage13_11001;
wire    ap_block_state15_pp0_stage14_iter0;
wire    ap_block_pp0_stage14_11001;
wire    ap_CS_fsm_pp0_stage14;
wire    ap_block_state16_pp0_stage15_iter0;
wire    ap_block_pp0_stage15_11001;
wire    ap_CS_fsm_pp0_stage15;
reg   [17:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
wire    ap_reset_idle_pp0;
reg    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_state8_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_pp0_stage7_11001;
wire    ap_block_state9_pp0_stage8_iter0;
wire    ap_block_pp0_stage8_subdone;
wire    ap_block_pp0_stage8_11001;
reg    ap_block_pp0_stage9_subdone;
wire    ap_block_pp0_stage10_subdone;
wire    ap_block_pp0_stage11_subdone;
reg    ap_block_pp0_stage12_subdone;
reg    ap_block_pp0_stage13_subdone;
wire    ap_block_pp0_stage14_subdone;
wire    ap_block_pp0_stage15_subdone;
wire    ap_block_pp0_stage16_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [23:0] address_i_V_TDATA_int_regslice;
reg    address_i_V_TVALID_int_regslice;
wire    address_i_V_TREADY_int_regslice;
wire    regslice_both_address_i_V_U_vld_out;
reg    data_i_V_TVALID_int_regslice;
wire    data_i_V_TREADY_int_regslice;
wire    regslice_both_data_i_V_U_vld_out;
wire    regslice_both_readPSN_l_V_U_apdone_blk;
wire   [23:0] readPSN_l_V_TDATA_int_regslice;
wire    readPSN_l_V_TVALID_int_regslice;
reg    readPSN_l_V_TREADY_int_regslice;
wire    regslice_both_readPSN_l_V_U_ack_in;
wire    regslice_both_writePSN_l_V_U_apdone_blk;
wire   [23:0] writePSN_l_V_TDATA_int_regslice;
wire    writePSN_l_V_TVALID_int_regslice;
reg    writePSN_l_V_TREADY_int_regslice;
wire    regslice_both_writePSN_l_V_U_ack_in;
wire   [128:0] grp_fu_204_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_rst_reg_2 = 1'b0;
#0 ap_rst_reg_1 = 1'b0;
#0 ap_rst_n_inv = 1'b0;
#0 currentPacketStatus_preg = 2'd0;
#0 currentPacketStatus_ap_vld_preg = 1'b0;
#0 sleep_V = 64'd0;
#0 ap_CS_fsm = 18'd1;
#0 icmp_ln870_reg_428 = 1'd0;
#0 icmp_ln870_1_reg_448 = 1'd0;
#0 icmp_ln870_2_reg_452 = 1'd0;
#0 icmp_ln886_reg_489 = 1'd0;
#0 tmp_5_reg_423 = 24'd0;
#0 icmp_ln870_reg_428_pp0_iter1_reg = 1'd0;
#0 timeoutInNs_read_reg_432 = 64'd0;
#0 sleep_V_load_reg_442 = 64'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 bitAddress_V_reg_456 = 20'd0;
#0 HBMaddress_V_reg_461 = 26'd0;
#0 tmp_reg_472 = 58'd0;
#0 header_time_V_reg_477 = 64'd0;
#0 ret_1_reg_482 = 65'd0;
#0 tmp_2_reg_498 = 1'd0;
#0 mul_ln1364_1_reg_509 = 131'd0;
#0 tmp_4_reg_514 = 63'd0;
#0 sub_ln1364_reg_520 = 131'd0;
#0 sub_ln1364_1_reg_525 = 63'd0;
end

tx_checkTimeout_dev_header_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 256 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_HEADER_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_HEADER_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_HEADER_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_HEADER_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_HEADER_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_HEADER_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_HEADER_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_HEADER_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_HEADER_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_HEADER_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_HEADER_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_HEADER_CACHE_VALUE ))
header_m_axi_U(
    .AWVALID(m_axi_header_AWVALID),
    .AWREADY(m_axi_header_AWREADY),
    .AWADDR(m_axi_header_AWADDR),
    .AWID(m_axi_header_AWID),
    .AWLEN(m_axi_header_AWLEN),
    .AWSIZE(m_axi_header_AWSIZE),
    .AWBURST(m_axi_header_AWBURST),
    .AWLOCK(m_axi_header_AWLOCK),
    .AWCACHE(m_axi_header_AWCACHE),
    .AWPROT(m_axi_header_AWPROT),
    .AWQOS(m_axi_header_AWQOS),
    .AWREGION(m_axi_header_AWREGION),
    .AWUSER(m_axi_header_AWUSER),
    .WVALID(m_axi_header_WVALID),
    .WREADY(m_axi_header_WREADY),
    .WDATA(m_axi_header_WDATA),
    .WSTRB(m_axi_header_WSTRB),
    .WLAST(m_axi_header_WLAST),
    .WID(m_axi_header_WID),
    .WUSER(m_axi_header_WUSER),
    .ARVALID(m_axi_header_ARVALID),
    .ARREADY(m_axi_header_ARREADY),
    .ARADDR(m_axi_header_ARADDR),
    .ARID(m_axi_header_ARID),
    .ARLEN(m_axi_header_ARLEN),
    .ARSIZE(m_axi_header_ARSIZE),
    .ARBURST(m_axi_header_ARBURST),
    .ARLOCK(m_axi_header_ARLOCK),
    .ARCACHE(m_axi_header_ARCACHE),
    .ARPROT(m_axi_header_ARPROT),
    .ARQOS(m_axi_header_ARQOS),
    .ARREGION(m_axi_header_ARREGION),
    .ARUSER(m_axi_header_ARUSER),
    .RVALID(m_axi_header_RVALID),
    .RREADY(m_axi_header_RREADY),
    .RDATA(m_axi_header_RDATA),
    .RLAST(m_axi_header_RLAST),
    .RID(m_axi_header_RID),
    .RUSER(m_axi_header_RUSER),
    .RRESP(m_axi_header_RRESP),
    .BVALID(m_axi_header_BVALID),
    .BREADY(m_axi_header_BREADY),
    .BRESP(m_axi_header_BRESP),
    .BID(m_axi_header_BID),
    .BUSER(m_axi_header_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(header_ARVALID),
    .I_ARREADY(header_ARREADY),
    .I_ARADDR(zext_ln534_fu_280_p1),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(header_RVALID),
    .I_RREADY(header_RREADY),
    .I_RDATA(header_RDATA),
    .I_RID(header_RID),
    .I_RUSER(header_RUSER),
    .I_RRESP(header_RRESP),
    .I_RLAST(header_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(header_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(header_WREADY),
    .I_WDATA(256'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(32'd0),
    .I_BVALID(header_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(header_BRESP),
    .I_BID(header_BID),
    .I_BUSER(header_BUSER)
);

tx_checkTimeout_dev_mul_64ns_66ns_129_6_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 66 ),
    .dout_WIDTH( 129 ))
mul_64ns_66ns_129_6_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_204_p0),
    .din1(grp_fu_204_p1),
    .ce(grp_fu_204_ce),
    .dout(grp_fu_204_p2)
);

tx_checkTimeout_dev_mul_65s_67ns_131_6_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 65 ),
    .din1_WIDTH( 67 ),
    .dout_WIDTH( 131 ))
mul_65s_67ns_131_6_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(ret_1_reg_482),
    .din1(grp_fu_343_p1),
    .ce(grp_fu_343_ce),
    .dout(grp_fu_343_p2)
);

tx_checkTimeout_dev_regslice_both #(
    .DataWidth( 24 ))
regslice_both_address_i_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(address_i_V_TDATA_int_regslice),
    .vld_in(address_i_V_TVALID_int_regslice),
    .ack_in(address_i_V_TREADY_int_regslice),
    .data_out(address_i_V_TDATA),
    .vld_out(regslice_both_address_i_V_U_vld_out),
    .ack_out(address_i_V_TREADY),
    .apdone_blk(regslice_both_address_i_V_U_apdone_blk)
);

tx_checkTimeout_dev_regslice_both #(
    .DataWidth( 8 ))
regslice_both_data_i_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(8'd2),
    .vld_in(data_i_V_TVALID_int_regslice),
    .ack_in(data_i_V_TREADY_int_regslice),
    .data_out(data_i_V_TDATA),
    .vld_out(regslice_both_data_i_V_U_vld_out),
    .ack_out(data_i_V_TREADY),
    .apdone_blk(regslice_both_data_i_V_U_apdone_blk)
);

tx_checkTimeout_dev_regslice_both #(
    .DataWidth( 24 ))
regslice_both_readPSN_l_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(readPSN_l_V_TDATA),
    .vld_in(readPSN_l_V_TVALID),
    .ack_in(regslice_both_readPSN_l_V_U_ack_in),
    .data_out(readPSN_l_V_TDATA_int_regslice),
    .vld_out(readPSN_l_V_TVALID_int_regslice),
    .ack_out(readPSN_l_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_readPSN_l_V_U_apdone_blk)
);

tx_checkTimeout_dev_regslice_both #(
    .DataWidth( 24 ))
regslice_both_writePSN_l_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(writePSN_l_V_TDATA),
    .vld_in(writePSN_l_V_TVALID),
    .ack_in(regslice_both_writePSN_l_V_U_ack_in),
    .data_out(writePSN_l_V_TDATA_int_regslice),
    .vld_out(writePSN_l_V_TVALID_int_regslice),
    .ack_out(writePSN_l_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_writePSN_l_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        HBMaddress_V_reg_461 <= 26'd0;
    end else begin
        if (((icmp_ln870_2_fu_220_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln870_1_fu_214_p2 == 1'd1) & (icmp_ln870_reg_428 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
            HBMaddress_V_reg_461 <= {{ret_fu_253_p2[30:5]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage17) & (1'b0 == ap_block_pp0_stage17_subdone))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == 1'b0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_rst_n_inv <= 1'b0;
    end else begin
        ap_rst_n_inv <= ap_rst_reg_1;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_rst_reg_1 <= 1'b0;
    end else begin
        ap_rst_reg_1 <= ap_rst_reg_2;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_rst_reg_2 <= 1'b0;
    end else begin
        ap_rst_reg_2 <= ~ap_rst_n;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        bitAddress_V_reg_456 <= 20'd0;
    end else begin
        if (((icmp_ln870_2_fu_220_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln870_1_fu_214_p2 == 1'd1) & (icmp_ln870_reg_428 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
            bitAddress_V_reg_456 <= bitAddress_V_fu_226_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        currentPacketStatus_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage17) & (1'b0 == ap_block_pp0_stage17_11001) & (1'b1 == 1'b1))) begin
            currentPacketStatus_ap_vld_preg <= 1'b0;
        end else if ((currentPacketStatus_ap_vld == 1'b1)) begin
            currentPacketStatus_ap_vld_preg <= currentPacketStatus_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        currentPacketStatus_preg <= 2'd0;
    end else begin
        if ((currentPacketStatus_ap_vld == 1'b1)) begin
            currentPacketStatus_preg <= currentPacketStatus;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        header_time_V_reg_477 <= 64'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage9) & (icmp_ln870_2_reg_452 == 1'd1) & (icmp_ln870_1_reg_448 == 1'd1) & (icmp_ln870_reg_428 == 1'd0) & (1'b0 == ap_block_pp0_stage9_11001))) begin
            header_time_V_reg_477 <= {{header_RDATA[174:111]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln870_1_reg_448 <= 1'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln870_reg_428 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
            icmp_ln870_1_reg_448 <= icmp_ln870_1_fu_214_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln870_2_reg_452 <= 1'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln870_1_fu_214_p2 == 1'd1) & (icmp_ln870_reg_428 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
            icmp_ln870_2_reg_452 <= icmp_ln870_2_fu_220_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln870_reg_428 <= 1'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            icmp_ln870_reg_428 <= icmp_ln870_fu_194_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln870_reg_428_pp0_iter1_reg <= 1'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            icmp_ln870_reg_428_pp0_iter1_reg <= icmp_ln870_reg_428;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln886_reg_489 <= 1'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage11) & (icmp_ln870_2_reg_452 == 1'd1) & (icmp_ln870_1_reg_448 == 1'd1) & (icmp_ln870_reg_428 == 1'd0) & (1'b0 == ap_block_pp0_stage11_11001))) begin
            icmp_ln886_reg_489 <= icmp_ln886_fu_335_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        mul_ln1364_1_reg_509 <= 131'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage16) & (icmp_ln886_reg_489 == 1'd0) & (icmp_ln870_2_reg_452 == 1'd1) & (icmp_ln870_1_reg_448 == 1'd1) & (icmp_ln870_reg_428 == 1'd0) & (1'b0 == ap_block_pp0_stage16_11001))) begin
            mul_ln1364_1_reg_509 <= grp_fu_343_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ret_1_reg_482 <= 65'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage10) & (icmp_ln870_2_reg_452 == 1'd1) & (icmp_ln870_1_reg_448 == 1'd1) & (icmp_ln870_reg_428 == 1'd0) & (1'b0 == ap_block_pp0_stage10_11001))) begin
            ret_1_reg_482 <= ret_1_fu_326_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sleep_V <= 64'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln870_1_reg_448 == 1'd0) & (icmp_ln870_reg_428 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == 1'b1))) begin
            sleep_V <= add_ln692_fu_269_p2;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage6) & (icmp_ln870_reg_428 == 1'd1) & (1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == 1'b1))) begin
            sleep_V <= zext_ln1364_1_fu_300_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage12) & (icmp_ln886_reg_489 == 1'd1) & (icmp_ln870_2_reg_452 == 1'd1) & (icmp_ln870_1_reg_448 == 1'd1) & (icmp_ln870_reg_428 == 1'd0) & (1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == 1'b1))) begin
            sleep_V <= 64'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln870_reg_428_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln886_reg_489 == 1'd0) & (icmp_ln870_2_reg_452 == 1'd1) & (icmp_ln870_1_reg_448 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
            sleep_V <= sext_ln24_fu_413_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sleep_V_load_reg_442 <= 64'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
            sleep_V_load_reg_442 <= ap_sig_allocacmp_sleep_V_load;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sub_ln1364_1_reg_525 <= 63'd0;
    end else begin
        if (((tmp_2_reg_498 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln886_reg_489 == 1'd0) & (icmp_ln870_2_reg_452 == 1'd1) & (icmp_ln870_1_reg_448 == 1'd1) & (icmp_ln870_reg_428 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            sub_ln1364_1_reg_525 <= sub_ln1364_1_fu_396_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sub_ln1364_reg_520 <= 131'd0;
    end else begin
        if (((tmp_2_reg_498 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage17) & (icmp_ln886_reg_489 == 1'd0) & (icmp_ln870_2_reg_452 == 1'd1) & (icmp_ln870_1_reg_448 == 1'd1) & (icmp_ln870_reg_428 == 1'd0) & (1'b0 == ap_block_pp0_stage17_11001))) begin
            sub_ln1364_reg_520 <= sub_ln1364_fu_376_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        timeoutInNs_read_reg_432 <= 64'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            timeoutInNs_read_reg_432 <= timeoutInNs;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        tmp_2_reg_498 <= 1'd0;
    end else begin
        if (((icmp_ln886_fu_335_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage11) & (icmp_ln870_2_reg_452 == 1'd1) & (icmp_ln870_1_reg_448 == 1'd1) & (icmp_ln870_reg_428 == 1'd0) & (1'b0 == ap_block_pp0_stage11_11001))) begin
            tmp_2_reg_498 <= ret_1_reg_482[32'd64];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        tmp_4_reg_514 <= 63'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage16) & (icmp_ln886_reg_489 == 1'd0) & (icmp_ln870_2_reg_452 == 1'd1) & (icmp_ln870_1_reg_448 == 1'd1) & (icmp_ln870_reg_428 == 1'd0) & (1'b0 == ap_block_pp0_stage16_11001))) begin
            tmp_4_reg_514 <= {{grp_fu_343_p2[130:68]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        tmp_5_reg_423 <= 24'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            tmp_5_reg_423 <= readPSN_l_V_TDATA_int_regslice;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        tmp_reg_472 <= 58'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage5) & (icmp_ln870_reg_428 == 1'd1) & (1'b0 == ap_block_pp0_stage5_11001))) begin
            tmp_reg_472 <= {{grp_fu_204_p2[128:71]}};
        end
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage13) & (icmp_ln886_reg_489 == 1'd1) & (icmp_ln870_2_reg_452 == 1'd1) & (icmp_ln870_1_reg_448 == 1'd1) & (icmp_ln870_reg_428 == 1'd0) & (1'b0 == ap_block_pp0_stage13) & (1'b1 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage12) & (icmp_ln886_reg_489 == 1'd1) & (icmp_ln870_2_reg_452 == 1'd1) & (icmp_ln870_1_reg_448 == 1'd1) & (icmp_ln870_reg_428 == 1'd0) & (1'b0 == ap_block_pp0_stage12) & (1'b1 == 1'b1)))) begin
        address_i_V_TDATA_blk_n = address_i_V_TREADY_int_regslice;
    end else begin
        address_i_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op99_write_state13 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == 1'b1))) begin
        address_i_V_TVALID_int_regslice = 1'b1;
    end else begin
        address_i_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln870_reg_428_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln886_reg_489 == 1'd0) & (icmp_ln870_2_reg_452 == 1'd1) & (icmp_ln870_1_reg_448 == 1'd1) & (1'b0 == ap_block_pp0_stage1))) begin
        ap_sig_allocacmp_sleep_V_load = sext_ln24_fu_413_p1;
    end else begin
        ap_sig_allocacmp_sleep_V_load = sleep_V;
    end
end

always @ (*) begin
    if ((currentPacketStatus_ap_vld == 1'b1)) begin
        currentPacketStatus_ap_vld_in_sig = currentPacketStatus_ap_vld;
    end else begin
        currentPacketStatus_ap_vld_in_sig = currentPacketStatus_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln870_1_fu_214_p2 == 1'd1) & (icmp_ln870_reg_428 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == 1'b1))) begin
        currentPacketStatus_blk_n = currentPacketStatus_ap_vld;
    end else begin
        currentPacketStatus_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((currentPacketStatus_ap_vld == 1'b1)) begin
        currentPacketStatus_in_sig = currentPacketStatus;
    end else begin
        currentPacketStatus_in_sig = currentPacketStatus_preg;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage13) & (icmp_ln886_reg_489 == 1'd1) & (icmp_ln870_2_reg_452 == 1'd1) & (icmp_ln870_1_reg_448 == 1'd1) & (icmp_ln870_reg_428 == 1'd0) & (1'b0 == ap_block_pp0_stage13) & (1'b1 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage12) & (icmp_ln886_reg_489 == 1'd1) & (icmp_ln870_2_reg_452 == 1'd1) & (icmp_ln870_1_reg_448 == 1'd1) & (icmp_ln870_reg_428 == 1'd0) & (1'b0 == ap_block_pp0_stage12) & (1'b1 == 1'b1)))) begin
        data_i_V_TDATA_blk_n = data_i_V_TREADY_int_regslice;
    end else begin
        data_i_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op100_write_state13 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == 1'b1))) begin
        data_i_V_TVALID_int_regslice = 1'b1;
    end else begin
        data_i_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        grp_fu_204_ce = 1'b1;
    end else begin
        grp_fu_204_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage16) & (1'b0 == ap_block_pp0_stage16_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_11001)))) begin
        grp_fu_343_ce = 1'b1;
    end else begin
        grp_fu_343_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op70_readreq_state3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == 1'b1))) begin
        header_ARVALID = 1'b1;
    end else begin
        header_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op85_read_state10 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == 1'b1))) begin
        header_RREADY = 1'b1;
    end else begin
        header_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln870_2_reg_452 == 1'd1) & (icmp_ln870_1_reg_448 == 1'd1) & (icmp_ln870_reg_428 == 1'd0) & (1'b0 == ap_block_pp0_stage2) & (1'b1 == 1'b1))) begin
        header_blk_n_AR = m_axi_header_ARREADY;
    end else begin
        header_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage9) & (icmp_ln870_2_reg_452 == 1'd1) & (icmp_ln870_1_reg_448 == 1'd1) & (icmp_ln870_reg_428 == 1'd0) & (1'b0 == ap_block_pp0_stage9) & (1'b1 == 1'b1))) begin
        header_blk_n_R = m_axi_header_RVALID;
    end else begin
        header_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1))) begin
        readPSN_l_V_TDATA_blk_n = readPSN_l_V_TVALID_int_regslice;
    end else begin
        readPSN_l_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1))) begin
        readPSN_l_V_TREADY_int_regslice = 1'b1;
    end else begin
        readPSN_l_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == 1'b1))) begin
        sleep_o_ap_vld = 1'b1;
    end else begin
        sleep_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1))) begin
        writePSN_l_V_TDATA_blk_n = writePSN_l_V_TVALID_int_regslice;
    end else begin
        writePSN_l_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1))) begin
        writePSN_l_V_TREADY_int_regslice = 1'b1;
    end else begin
        writePSN_l_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (((ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((ap_reset_idle_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((1'b0 == ap_block_pp0_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        ap_ST_fsm_pp0_stage14 : begin
            if ((1'b0 == ap_block_pp0_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end
        end
        ap_ST_fsm_pp0_stage15 : begin
            if ((1'b0 == ap_block_pp0_stage15_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end
        end
        ap_ST_fsm_pp0_stage16 : begin
            if ((1'b0 == ap_block_pp0_stage16_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end
        end
        ap_ST_fsm_pp0_stage17 : begin
            if ((1'b0 == ap_block_pp0_stage17_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln213_fu_407_p2 = (select_ln1364_1_fu_402_p3 + 63'd10);

assign add_ln692_fu_269_p2 = ($signed(sleep_V_load_reg_442) + $signed(64'd18446744073709551615));

assign address_i_V_TDATA_int_regslice = bitAddress_V_reg_456;

assign address_i_V_TVALID = regslice_both_address_i_V_U_vld_out;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage13 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp0_stage14 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp0_stage15 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp0_stage16 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp0_stage17 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b1 == 1'b1) & ((writePSN_l_V_TVALID_int_regslice == 1'b0) | (readPSN_l_V_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b1 == 1'b1) & ((writePSN_l_V_TVALID_int_regslice == 1'b0) | (readPSN_l_V_TVALID_int_regslice == 1'b0)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage12_01001 = ((1'b1 == 1'b1) & (((data_i_V_TREADY_int_regslice == 1'b0) & (ap_predicate_op100_write_state13 == 1'b1)) | ((ap_predicate_op99_write_state13 == 1'b1) & (1'b0 == address_i_V_TREADY_int_regslice))));
end

always @ (*) begin
    ap_block_pp0_stage12_11001 = ((1'b1 == 1'b1) & ((1'b1 == ap_block_state13_io) | ((data_i_V_TREADY_int_regslice == 1'b0) & (ap_predicate_op100_write_state13 == 1'b1)) | ((ap_predicate_op99_write_state13 == 1'b1) & (1'b0 == address_i_V_TREADY_int_regslice))));
end

always @ (*) begin
    ap_block_pp0_stage12_subdone = ((1'b1 == 1'b1) & ((1'b1 == ap_block_state13_io) | ((data_i_V_TREADY_int_regslice == 1'b0) & (ap_predicate_op100_write_state13 == 1'b1)) | ((ap_predicate_op99_write_state13 == 1'b1) & (1'b0 == address_i_V_TREADY_int_regslice))));
end

assign ap_block_pp0_stage13 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage13_11001 = ((1'b1 == 1'b1) & ((1'b1 == ap_block_state14_io) | ((data_i_V_TREADY_int_regslice == 1'b0) & (ap_predicate_op104_write_state14 == 1'b1)) | ((ap_predicate_op103_write_state14 == 1'b1) & (1'b0 == address_i_V_TREADY_int_regslice))));
end

always @ (*) begin
    ap_block_pp0_stage13_subdone = ((1'b1 == 1'b1) & ((1'b1 == ap_block_state14_io) | ((data_i_V_TREADY_int_regslice == 1'b0) & (ap_predicate_op104_write_state14 == 1'b1)) | ((ap_predicate_op103_write_state14 == 1'b1) & (1'b0 == address_i_V_TREADY_int_regslice))));
end

assign ap_block_pp0_stage14_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((regslice_both_data_i_V_U_apdone_blk == 1'b1) | (regslice_both_address_i_V_U_apdone_blk == 1'b1))) | ((ap_predicate_op31_read_state2 == 1'b1) & (1'b1 == 1'b1) & (currentPacketStatus_ap_vld_in_sig == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((regslice_both_data_i_V_U_apdone_blk == 1'b1) | (regslice_both_address_i_V_U_apdone_blk == 1'b1))) | ((ap_predicate_op31_read_state2 == 1'b1) & (1'b1 == 1'b1) & (currentPacketStatus_ap_vld_in_sig == 1'b0)));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((1'b1 == ap_block_state3_io) & (1'b1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((1'b1 == ap_block_state3_io) & (1'b1 == 1'b1));
end

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage9_11001 = ((ap_predicate_op85_read_state10 == 1'b1) & (header_RVALID == 1'b0) & (1'b1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage9_subdone = ((ap_predicate_op85_read_state10 == 1'b1) & (header_RVALID == 1'b0) & (1'b1 == 1'b1));
end

always @ (*) begin
    ap_block_state10_pp0_stage9_iter0 = ((ap_predicate_op85_read_state10 == 1'b1) & (header_RVALID == 1'b0));
end

assign ap_block_state11_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_io = (((data_i_V_TREADY_int_regslice == 1'b0) & (ap_predicate_op100_write_state13 == 1'b1)) | ((ap_predicate_op99_write_state13 == 1'b1) & (1'b0 == address_i_V_TREADY_int_regslice)));
end

always @ (*) begin
    ap_block_state13_pp0_stage12_iter0 = (((data_i_V_TREADY_int_regslice == 1'b0) & (ap_predicate_op100_write_state13 == 1'b1)) | ((ap_predicate_op99_write_state13 == 1'b1) & (1'b0 == address_i_V_TREADY_int_regslice)));
end

always @ (*) begin
    ap_block_state14_io = (((data_i_V_TREADY_int_regslice == 1'b0) & (ap_predicate_op104_write_state14 == 1'b1)) | ((ap_predicate_op103_write_state14 == 1'b1) & (1'b0 == address_i_V_TREADY_int_regslice)));
end

always @ (*) begin
    ap_block_state14_pp0_stage13_iter0 = (((data_i_V_TREADY_int_regslice == 1'b0) & (ap_predicate_op104_write_state14 == 1'b1)) | ((ap_predicate_op103_write_state14 == 1'b1) & (1'b0 == address_i_V_TREADY_int_regslice)));
end

assign ap_block_state15_pp0_stage14_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage15_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage16_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage17_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((writePSN_l_V_TVALID_int_regslice == 1'b0) | (readPSN_l_V_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state20_pp0_stage1_iter1 = ((regslice_both_data_i_V_U_apdone_blk == 1'b1) | (regslice_both_address_i_V_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = ((ap_predicate_op31_read_state2 == 1'b1) & (currentPacketStatus_ap_vld_in_sig == 1'b0));
end

always @ (*) begin
    ap_block_state3_io = ((ap_predicate_op70_readreq_state3 == 1'b1) & (header_ARREADY == 1'b0));
end

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op100_write_state13 = ((icmp_ln886_reg_489 == 1'd1) & (icmp_ln870_2_reg_452 == 1'd1) & (icmp_ln870_1_reg_448 == 1'd1) & (icmp_ln870_reg_428 == 1'd0));
end

always @ (*) begin
    ap_predicate_op103_write_state14 = ((icmp_ln886_reg_489 == 1'd1) & (icmp_ln870_2_reg_452 == 1'd1) & (icmp_ln870_1_reg_448 == 1'd1) & (icmp_ln870_reg_428 == 1'd0));
end

always @ (*) begin
    ap_predicate_op104_write_state14 = ((icmp_ln886_reg_489 == 1'd1) & (icmp_ln870_2_reg_452 == 1'd1) & (icmp_ln870_1_reg_448 == 1'd1) & (icmp_ln870_reg_428 == 1'd0));
end

always @ (*) begin
    ap_predicate_op31_read_state2 = ((icmp_ln870_1_fu_214_p2 == 1'd1) & (icmp_ln870_reg_428 == 1'd0));
end

always @ (*) begin
    ap_predicate_op70_readreq_state3 = ((icmp_ln870_2_reg_452 == 1'd1) & (icmp_ln870_1_reg_448 == 1'd1) & (icmp_ln870_reg_428 == 1'd0));
end

always @ (*) begin
    ap_predicate_op85_read_state10 = ((icmp_ln870_2_reg_452 == 1'd1) & (icmp_ln870_1_reg_448 == 1'd1) & (icmp_ln870_reg_428 == 1'd0));
end

always @ (*) begin
    ap_predicate_op99_write_state13 = ((icmp_ln886_reg_489 == 1'd1) & (icmp_ln870_2_reg_452 == 1'd1) & (icmp_ln870_1_reg_448 == 1'd1) & (icmp_ln870_reg_428 == 1'd0));
end

assign bitAddress_V_fu_226_p1 = tmp_5_reg_423[19:0];

assign data_i_V_TVALID = regslice_both_data_i_V_U_vld_out;

assign grp_fu_204_p0 = grp_fu_204_p00;

assign grp_fu_204_p00 = timeoutInNs;

assign grp_fu_204_p1 = 129'd26235369349275806743;

assign grp_fu_343_p1 = 131'd59029581035870565172;

assign icmp_ln870_1_fu_214_p2 = ((ap_sig_allocacmp_sleep_V_load == 64'd0) ? 1'b1 : 1'b0);

assign icmp_ln870_2_fu_220_p2 = ((currentPacketStatus_in_sig == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln870_fu_194_p2 = ((readPSN_l_V_TDATA_int_regslice == writePSN_l_V_TDATA_int_regslice) ? 1'b1 : 1'b0);

assign icmp_ln886_fu_335_p2 = (($signed(ret_1_reg_482) > $signed(zext_ln886_fu_332_p1)) ? 1'b1 : 1'b0);

assign readPSN_l_V_TREADY = regslice_both_readPSN_l_V_U_ack_in;

assign ret_1_fu_326_p2 = (zext_ln215_fu_319_p1 - zext_ln215_1_fu_323_p1);

assign ret_fu_253_p2 = (zext_ln1345_fu_237_p1 + zext_ln1345_1_fu_249_p1);

assign select_ln1364_1_fu_402_p3 = ((tmp_2_reg_498[0:0] == 1'b1) ? sub_ln1364_1_reg_525 : tmp_4_reg_514);

assign select_ln1364_fu_390_p3 = ((tmp_2_reg_498[0:0] == 1'b1) ? tmp_3_fu_381_p4 : tmp_4_reg_514);

assign sext_ln24_fu_413_p1 = $signed(add_ln213_fu_407_p2);

assign shl_ln1345_1_fu_241_p3 = {{bitAddress_V_fu_226_p1}, {5'd0}};

assign shl_ln_fu_229_p3 = {{bitAddress_V_fu_226_p1}, {10'd0}};

assign sleep_o = sleep_V_load_reg_442;

assign sub_ln1364_1_fu_396_p2 = (63'd0 - select_ln1364_fu_390_p3);

assign sub_ln1364_fu_376_p2 = (131'd0 - mul_ln1364_1_reg_509);

assign tmp_3_fu_381_p4 = {{sub_ln1364_reg_520[130:68]}};

assign writePSN_l_V_TREADY = regslice_both_writePSN_l_V_U_ack_in;

assign zext_ln1345_1_fu_249_p1 = shl_ln1345_1_fu_241_p3;

assign zext_ln1345_fu_237_p1 = shl_ln_fu_229_p3;

assign zext_ln1364_1_fu_300_p1 = tmp_reg_472;

assign zext_ln215_1_fu_323_p1 = header_time_V_reg_477;

assign zext_ln215_fu_319_p1 = timer;

assign zext_ln534_fu_280_p1 = HBMaddress_V_reg_461;

assign zext_ln886_fu_332_p1 = timeoutInNs_read_reg_432;

endmodule //tx_checkTimeout_dev
